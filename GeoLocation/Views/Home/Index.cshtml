@model GeoLocation.Models.Search
@{
    ViewBag.Title = "Home Page";
}
<br />
@using (Html.BeginForm(null, null, FormMethod.Post, new { name = "frmGeoLocation", id = "frmGeoLocation" }))
{
    @Html.AntiForgeryToken()
    <div class="form-horizontal center-block">
        <p>Please type an address to find it on the map below.</p>

        @Html.ValidationSummary(false, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.Address, htmlAttributes: new { @class = "control-label col-md-1" })
            <div class="col-md-6">
                @Html.EditorFor(model => model.Address, new { htmlAttributes = new { @class = "form-control" } })
            </div>
            <div>
                <input type="submit" value="Find" class="btn btn-primary" />
            </div>
            <div class="col-md-6">
                @Html.ValidationMessageFor(model => model.Address, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>

}
<div class="row">
    <div id="canvas" style="width:90%; margin-bottom: 5px; height:400px;"></div>
</div>

<script>
    var url = '@Url.Action("index", "")';
     //<![CDATA[
   function initMap() {
       var map = new google.maps.Map(document.getElementById('canvas'), {
            center: { lat: 51.515741, lng: -0.126324 },
            zoom: 15
        });
       return map;

    }
    function geocodeAddress(geocoder, resultsMap, address)    {
        var location = 0;
        geocoder.geocode({'address': address },
            function (results, status) {
              if (status === 'OK') {
                  resultsMap.setCenter(results[0].geometry.location);
                  var marker = new google.maps.Marker({
                      map: resultsMap,
                      draggable: true,
                      animation: google.maps.Animation.DROP,
                      position: results[0].geometry.location
                  });
                  if (resultsMap != undefined) {
                      marker.setMap(resultsMap);
                  }
                  location = results[0].geometry.location;
                  var content = '<div id="content">' +
                      '<div id="bodyContent">' +
                      '<p>`${address}`</p>' +
                      '</div>' +
                      '</div>';

                  var infowindow = new google.maps.InfoWindow({
                      content: content
                  });
              }
              else {
                  alert('Geocode was not successful for the following reason: ' + status);
                }
            });
        return location;
    }

    $(function () {
        $('#frmGeoLocation').submit(function (e) {
        e.preventDefault();
        var address = $('#Address').val();
            if (address.length > 0) {
               var geocoder = new google.maps.Geocoder();
                var map = initMap();
               var location = geocodeAddress(geocoder, map, address);
               $.ajax({
                    url: url,
                    method: 'POST',
                    data: {
                        __RequestVerificationToken: $("input[name='__RequestVerificationToken']").val(),
                        Address: address,
                        Location: location
                    },
                    success: function (data) {
                        alert(data.responseText);
                    },
                    error: function (error) {
                        console.error(error.responseText);
                    }
                });
            }
        });
    });

  //]]>
</script>

<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBwCniSpRQm3A2ZcpvvkSxtfTe-t4suOe0&libraries=places&callback=initMap" type="text/javascript"></script>
